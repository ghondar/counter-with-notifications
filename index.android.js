/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import PushNotification from 'react-native-push-notification'
import BackgroundTimer from 'react-native-background-timer'
import {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  View,
  AppState
} from 'react-native';

export default class notificationTest extends Component {
  constructor(props) {
    super(props)
    this.state = {
      count: 0,
      appState: '',
      intervalId: 0
    }
  }

  componentWillMount() {
    AppState.addEventListener('change', this._handleAppStateChange.bind(this));
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this._handleAppStateChange);
  }

  _handleAppStateChange = (nextAppState) => {
    const { appState, intervalId } = this.state
    if (appState.match(/inactive|background/) && nextAppState === 'active') {
      // BackgroundTimer.clearInterval(intervalId);
      PushNotification.cancelAllLocalNotifications()
    }
    this.setState({
      appState: nextAppState
    });
  }

  render() {
    return (
      <View style={styles.container}>
        <TouchableHighlight style={{
          width: 150,
          height: 50,
          justifyContent: 'center',
          alignItems: 'center'
        }} onPress={this._handleButton.bind(this)}>
          <Text style={{
            fontSize: 20
          }}>Notificacion</Text>
        </TouchableHighlight>
        <Text style={{
          fontSize: 40
        }}>{this.state.count}</Text>
      </View>
    );
  }

  _handleButton() {
    this.setState({
      intervalId: BackgroundTimer.setInterval(() => {
        this.setState({
          count: this.state.count + 1
        }, () => {
          if(this.state.appState.match(/inactive|background/))
            PushNotification.localNotification({
              /* Android Only Properties */
              id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              ticker: "My Notification Ticker", // (optional)
              autoCancel: true, // (optional) default: true
              largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
              smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
              bigText: this.state.count + '', // (optional) default: "message" prop
              subText: "Contador", // (optional) default: none
              color: "red", // (optional) default: system default
              vibrate: false, // (optional) default: true
              vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              tag: 'some_tag', // (optional) add tag to message
              group: "group", // (optional) add group to message
              ongoing: true, // (optional) set whether this is an "ongoing" notification

              /* iOS and Android properties */
              title: "My Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
              message: this.state.count + '', // (required)
              playSound: false, // (optional) default: true
            });
        })
      }, 1000)
    })
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('notificationTest', () => notificationTest);
